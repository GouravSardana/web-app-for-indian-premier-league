{"version":3,"sources":["components/Navbar/Navbar.js","components/Homepage/Home.js","components/Seasons/SeasonCard.js","components/Seasons/AllSeasonsList.js","components/Seasons/SeasonDetails.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","React","Component","Home","className","to","style","fontSize","paddingLeft","SeasonCard","this","props","Season_Id","Season_Winner","Season_Runner_Up","AllSeasonsList","state","setState","seasons","renderSesonsCard","map","season","Season_Year","SeasonDetails","seasonFixtures","matches","filter","match","toLocaleString","params","id","console","log","renderSeasonFixtures","reverse","fixture","index","matchesCount","length","key","Match_Id","Match_Date","src","teams","Team_Name_Id","Img_Src","height","alt","Team_Name","Opponent_Team_Id","Venue_Name","City_Name","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0eb54eb8.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Navbar extends React.Component{\n  render() {\n    return(\n      <div>\n        <nav></nav>\n      </div>\n    )\n  }\n}\nexport  default Navbar;","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\n// components\nimport Navbar from \"../Navbar/Navbar\";\n\nclass Home extends React.Component {\n  render() {\n    return(\n      <div>\n        <header>\n          <Navbar />\n          <div className=\"container center\">\n            <h2 className=\"homeHeroHeading blue darken-4 center\">Indian Premier League</h2>\n            <h4 className=\"homeHeroSubHeading indigo darken-4 center\">Eight weeks of power-packed cricketing action. </h4>\n            <Link to=\"/all-seasons\" className=\"btn btn-large heroBtn z-depth-0 center-align\">VIEW ALL IPL SEASONS  <i style={{fontSize: \"16px\", paddingLeft: \"10px\"}} className=\"fas fa-arrow-right\"></i></Link>\n          </div>\n        </header>\n        <section className=\"container\">\n          <h3 className=\"indigo-text text-darken-4\">About IPL</h3>\n          <div className=\"divider\"></div>\n          <div className=\"row\">\n            <div className=\"col m8 s12\">\n              <p>The Indian Premier League (IPL) is a professional Twenty20 cricket league in India contested every year by eight teams representing eight different cities in India. The league was founded by the Board of Control for Cricket in India (BCCI) in 2008.</p>\n              <p>The IPL is the most-attended cricket league in the world and ranked sixth by average attendance among all sports leagues. IPL became the first sporting event in the world to be broadcast live on YouTube.</p>\n            </div>\n            <div className=\"col m4 s12\">\n              <blockquote>\n                The IPL has been designed to entice an entire new generation of sports fans into the grounds throughout the country. The dynamic Twenty20 format has been designed to attract a young fan base, which also includes women and children.\n                <br />\n                <br />\n                <b>~ Lalit Modi during the launch of the IPL</b>\n              </blockquote>\n            </div>\n          </div>\n        </section>\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\nclass SeasonCard extends React.Component{\n  render() {\n    return(\n      <Link to={`/all-seasons/season${this.props.Season_Id}`}>\n        <div className='card seasonCard z-depth-0'>\n          <div className=\"card-content\">\n            <h5 className=\"card-title indigo-text\">IPL Season {this.props.Season_Id}</h5>\n            <div className=\"card-action\">\n              <span><i className=\"fas fa-trophy\"></i> Winner : {this.props.Season_Winner}</span>\n              <br />\n              <span><i className=\"fas fa-medal\"></i> Runner-up : {this.props.Season_Runner_Up}</span>\n            </div>\n          </div>\n        </div>\n      </Link>\n    )\n  }\n}\n\nexport default SeasonCard;","import React from 'react'\nimport SeasonCard from \"./SeasonCard\";\nimport Navbar from \"../Navbar/Navbar\";\n\n\n// data\nimport seasons from '../../data/seasons.json';\n\n\nclass AllSeasonsList extends React.Component {\n  state = {\n\n  }\n\n  componentDidMount() {\n    this.setState({seasons})\n  }\n\n\n  render() {\n    const seasons = this.state.seasons;\n    const renderSesonsCard = (seasons) ? (seasons.map((season) => {\n      return(\n        <SeasonCard Season_Id={season.Season_Id} Season_Year={season.Season_Year} Season_Winner={\"\"} />\n      )\n    }) ) : ( <p>Loading seasons tab ... </p> )\n\n\n\n    return(\n      <div>\n        <Navbar />\n        <div className=\"container\">\n          <h3 className=\"indigo-text text-darken-4 darken\">All Seasons</h3>\n          <div className=\"divider\"></div>\n          <div className=\"row\">\n            <div className=\"col m12 s12\">\n              <div className=\"allSeasonsList\">\n                {renderSesonsCard}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\nexport default AllSeasonsList;","import React from \"react\";\nimport {Link} from 'react-router-dom';\n\n// data\nimport matches from '../../data/matches.json';\nimport teams from '../../data/teams.json'\nimport Navbar from \"../Navbar/Navbar\";\n\nclass SeasonDetails extends  React.Component{\n    state = { }\n\n  componentDidMount() {\n    const seasonFixtures = matches.filter((match) => match.Season_Id.toLocaleString() === this.props.match.params.id)\n    console.log(seasonFixtures)\n    this.setState({seasonFixtures});\n  }\n\n\n  render() {\n    const seasonFixtures = this.state.seasonFixtures;\n\n    const renderSeasonFixtures = (seasonFixtures) ? (seasonFixtures.reverse().map((fixture, index) => {\n      const matchesCount = seasonFixtures.length;\n      return(\n        <Link key={index} to={`/all-seasons/season${fixture.Season_Id}/match${fixture.Match_Id}`}>\n        <div className=\"card fixtureCard z-depth-0\">\n          <div className=\"card-content\">\n            { (index === 0) && <h6 className=\"grey-text\"><b><i className=\"fas fa-star\"></i> <i>FINAL</i></b></h6> }\n            { (index === 1) && <h6 className=\"grey-text\"><b><i className=\"fas fa-star\"></i> <i>QUALIFIER 2</i></b></h6> }\n            { (index === 2) && <h6 className=\"grey-text\"><b><i className=\"fas fa-star\"></i> <i>ELIMINATOR</i></b></h6> }\n            { (index === 3) && <h6 className=\"grey-text\"><b><i className=\"fas fa-star\"></i> <i>QUALIFIER 1</i></b></h6> }\n\n            <p className=\"grey-text\"><b><i>Match {matchesCount - index} played on {fixture.Match_Date}</i></b></p>\n            <div className=\"matchDetailShort\">\n              <div>\n                <h6 className=\"teamName indigo-text text-darken-4\"><img className=\"textMiddle\" src={teams[fixture.Team_Name_Id - 1].Img_Src} height=\"60px\" alt=\"\" /> {teams[fixture.Team_Name_Id - 1].Team_Name}</h6>\n              </div>\n              <div>\n                <h4 className=\"blue-text text-darken-4\">VS</h4>\n              </div>\n              <div>\n                <h6 className=\"teamName indigo-text text-darken-4\"><img className=\"textMiddle\" src={teams[fixture.Opponent_Team_Id - 1].Img_Src} height=\"80px\" alt=\"\" /> {teams[fixture.Opponent_Team_Id - 1].Team_Name}</h6>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-action\">\n            <h6 className=\"grey-text\"><b><i className=\"fas fa-map-marker-alt\"></i> <i>{fixture.Venue_Name}, {fixture.City_Name}</i></b></h6>\n          </div>\n        </div>\n        </Link>\n      )\n    })) : (<p>Loading fixtures ...</p>)\n\n    return(\n      <div>\n        <Navbar />\n        <div className=\"container\">\n          <h3 className=\"indigo-text text-darken-4\">Fixtures for season {this.props.Season_Id}</h3>\n          <div className=\"divider\"></div>\n          {renderSeasonFixtures}\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default SeasonDetails;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n\n// components\nimport Home from \"./components/Homepage/Home\";\nimport AllSeasonsList from \"./components/Seasons/AllSeasonsList\";\nimport SeasonDetails from \"./components/Seasons/SeasonDetails\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/all-seasons\" component={AllSeasonsList} />\n          <Route path=\"/all-seasons/season:id\" component={SeasonDetails} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}